/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package soalNo2;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class salesOrder extends javax.swing.JFrame {

    public Statement st;
    public ResultSet rs;
    Connection conn = Conn.Connect();

    /**
     * Creates new form salesOrder
     */
    public salesOrder() {
        initComponents();
        initTables();

        tableListOrder.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        tableListOrder.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            showDataOrderItems();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableListOrder = new javax.swing.JTable();
        labelTableOrder = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableListOrderItem = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        buttonAdd = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        labelTotalTrxTitle = new javax.swing.JLabel();
        labelTotalTrxValue = new javax.swing.JLabel();
        labelOrderID = new javax.swing.JLabel();
        textSearch = new javax.swing.JTextField();
        buttonSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelTitle.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        labelTitle.setText("Order Penjualan");

        jScrollPane1.setViewportView(tableListOrder);

        labelTableOrder.setText("List Order");

        jScrollPane2.setViewportView(tableListOrderItem);

        jLabel1.setText("Order Item | Order ID :");

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        labelTotalTrxTitle.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        labelTotalTrxTitle.setText("Total Transaksi :");

        labelTotalTrxValue.setText("0");

        labelOrderID.setText("-");

        buttonSearch.setText("Search");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(labelTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(29, 29, 29))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelTableOrder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelTotalTrxTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelTotalTrxValue, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(labelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTableOrder)
                    .addComponent(jLabel1)
                    .addComponent(labelOrderID)
                    .addComponent(textSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonAdd)
                        .addComponent(buttonDelete))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelTotalTrxTitle)
                        .addComponent(labelTotalTrxValue)))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // TODO add your handling code here:
        salesOrderInput form = new salesOrderInput();
        form.show();
        dispose();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableListOrder.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Pilih 1 Data dari Tabel Order untuk Didelete!");
        }

        String orderID = tableListOrder.getValueAt(selectedRow, 1).toString();

        int jawab = JOptionPane.showConfirmDialog(this, "Yakin untuk delete data nilai Order ID : " + orderID + "?");

        switch (jawab) {
            case JOptionPane.YES_OPTION:
                try {
                    st = conn.createStatement();
                    st.executeUpdate("DELETE FROM `order` WHERE order_id = " + orderID + "");

                    st = conn.createStatement();
                    st.executeUpdate("DELETE FROM order_item WHERE order_id = " + orderID + "");

                    JOptionPane.showMessageDialog(null, "Hapus Data Order Berhasil!");
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }
                break;
            case JOptionPane.NO_OPTION:
                JOptionPane.showMessageDialog(this, "Delete canceled!");
                break;
            case JOptionPane.CANCEL_OPTION:
                JOptionPane.showMessageDialog(this, "Delete canceled!");
        }

        initTables();
        labelTotalTrxValue.setText("0");
        labelOrderID.setText("-");
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        // TODO add your handling code here:
        String search = textSearch.getText();

        if (!search.isEmpty()) {
            DefaultTableModel tableOrder = (DefaultTableModel) tableListOrder.getModel();
            tableOrder.setRowCount(0);

            DefaultTableModel tableOrderItem = (DefaultTableModel) tableListOrderItem.getModel();
            tableOrderItem.setRowCount(0);

            try {
                String sql = "select * from `order` where customer_name like '%" + search + "%' or employee_name like '%" + search + "%' order by transaction_at desc";
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                rs = pst.executeQuery(sql);

                DefaultTableModel table = (DefaultTableModel) tableListOrder.getModel();
                int num = 1;
                while (rs.next()) {
                    String orderId = rs.getString("order_id");
                    String customerName = rs.getString("customer_name");
                    String employeeName = rs.getString("employee_name");
                    String dateTime = rs.getString("transaction_at");

                    String[] rowData = {String.valueOf(num), orderId, customerName, employeeName, dateTime};
                    table.addRow(rowData);
                    num++;
                }

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Show Data Order Failed!");
            }
        } else {
            showDataOrders();
        }
    }//GEN-LAST:event_buttonSearchActionPerformed

    private void initTables() {
        DefaultTableModel tableOrder = (DefaultTableModel) tableListOrder.getModel();
        tableOrder.setRowCount(0);
        tableOrder.setColumnCount(0);

        tableOrder.addColumn("#");
        tableOrder.addColumn("ID");
        tableOrder.addColumn("Customer Name");
        tableOrder.addColumn("Employee Name");
        tableOrder.addColumn("Transaction At");

        showDataOrders();

        DefaultTableModel tableOrderItem = (DefaultTableModel) tableListOrderItem.getModel();
        tableOrderItem.setRowCount(0);
        tableOrderItem.setColumnCount(0);

        tableOrderItem.addColumn("#");
        tableOrderItem.addColumn("Product Name");
        tableOrderItem.addColumn("Qty");
        tableOrderItem.addColumn("Price");
    }

    private void showDataOrders() {
        try {
            DefaultTableModel tableOrder = (DefaultTableModel) tableListOrder.getModel();
            tableOrder.setRowCount(0);
            
            String sql = "select * from `order` order by transaction_at desc";
            java.sql.PreparedStatement pst = conn.prepareStatement(sql);
            rs = pst.executeQuery(sql);

            DefaultTableModel table = (DefaultTableModel) tableListOrder.getModel();
            int num = 1;
            while (rs.next()) {
                String orderId = rs.getString("order_id");
                String customerName = rs.getString("customer_name");
                String employeeName = rs.getString("employee_name");
                String dateTime = rs.getString("transaction_at");

                String[] rowData = {String.valueOf(num), orderId, customerName, employeeName, dateTime};
                table.addRow(rowData);
                num++;
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Show Data Order Failed!");
        }
    }

    private void showDataOrderItems() {
        try {
            int selectedRow = tableListOrder.getSelectedRow();

            if (selectedRow != -1) {

                DefaultTableModel tableOrder = (DefaultTableModel) tableListOrder.getModel();
                String orderID = tableOrder.getValueAt(selectedRow, 1).toString();

                String sql = "select * from order_item where order_id = " + orderID + "";
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                rs = pst.executeQuery(sql);

                DefaultTableModel tableItem = (DefaultTableModel) tableListOrderItem.getModel();
                tableItem.setRowCount(0);
                int num = 1;
                while (rs.next()) {
                    String productName = rs.getString("product_name");
                    String qty = rs.getString("qty");
                    String price = rs.getString("price");

                    String[] rowData = {String.valueOf(num), productName, qty, price};
                    tableItem.addRow(rowData);
                    num++;
                }

                labelOrderID.setText(orderID);

            }
            sumTotal();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Show Data Order Failed!");
        }
    }

    private void sumTotal() {
        // Calculate the sum of qty and price
        int totalQty, totalPrice;
        int total = 0;

        DefaultTableModel table = (DefaultTableModel) tableListOrderItem.getModel();

        for (int i = 0; i < table.getRowCount(); i++) {
            totalQty = Integer.parseInt(table.getValueAt(i, 2).toString());
            totalPrice = Integer.parseInt(table.getValueAt(i, 3).toString());

            total += totalQty * totalPrice;
        }

        labelTotalTrxValue.setText(String.valueOf(total));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(salesOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(salesOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(salesOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(salesOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new salesOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelOrderID;
    private javax.swing.JLabel labelTableOrder;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelTotalTrxTitle;
    private javax.swing.JLabel labelTotalTrxValue;
    private javax.swing.JTable tableListOrder;
    private javax.swing.JTable tableListOrderItem;
    private javax.swing.JTextField textSearch;
    // End of variables declaration//GEN-END:variables
}
